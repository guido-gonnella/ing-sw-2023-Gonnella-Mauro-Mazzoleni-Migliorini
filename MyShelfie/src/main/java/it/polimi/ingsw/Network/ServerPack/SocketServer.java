package it.polimi.ingsw.Network.ServerPack;

import it.polimi.ingsw.Network.Message.ErrorMessage;
import it.polimi.ingsw.Network.Message.Message;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;

/**
 * Class that handles the communication between server and client
 * It communicates with one client only
 * Each client will have its own realization of this class
 */
public class SocketServer extends ServerConnection {

    private Socket socket;
    private ObjectInputStream input;
    private ObjectOutputStream output;

    /**
     * Constructor of the class
     * @param serverSocket of the server
     * @throws IOException
     */
    public SocketServer(ServerSocket serverSocket) {
        try {
            this.socket = serverSocket.accept();
            this.socket.setSoTimeout(250000);
            this.output = new ObjectOutputStream(socket.getOutputStream());
            this.input = new ObjectInputStream(socket.getInputStream());
            System.out.println("Client connected");
        }catch(SocketTimeoutException e){
            System.out.print("The client didn't respond in time.\n");
            //disconnect();
        }catch (IOException e){
            disconnect();
            System.out.print("Something went wrong...\n");
            //e.printStackTrace();
        }
    }

    /**
     * Reads a message from the client and returns it to
     * the virtual view
     * @return
     */
    public synchronized Message readMessage(){
            try {
                    Message messageArrived = (Message) input.readObject();
                    if (messageArrived != null) {
                        return messageArrived;
                    }
            }catch(SocketTimeoutException e){
                    System.out.print("The client didn't respond in time\n");
                    return new ErrorMessage("Error in receiving the message\n");
            }catch (IOException | ClassNotFoundException e) {
                //disconnect();
                //e.printStackTrace();
                return new ErrorMessage("Error in receiving the message\n");
            }
            //disconnect();
            return new ErrorMessage("Error in receiving the message\n");
    }

    /**
     * Send the message at the client via the {@link ObjectOutputStream stream} generated by the socket.
     * @param message the {@link Message} to be sent at the client.
     */
    public synchronized void sendMessage(Message message){
            try {
                output.writeObject(message);
                output.flush();
                output.reset();
            }catch(SocketTimeoutException e){
                System.out.print("The client didn't respond in time\n");
                //disconnect();
            }catch (IOException e) {
                //disconnect();
                System.out.print("Error in sending the message\n");
            }
    }

    /**
     * Disconnect the socket
     */
    public synchronized void disconnect(){
        try {
            if(output != null)
                output.close();
            if(input != null)
                input.close();
            if (socket != null && !socket.isClosed())
                socket.close();
        }catch(IOException e){
            e.printStackTrace();
        }
    }
}
